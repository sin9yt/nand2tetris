// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aa);

    Or(a=instruction[5], b=aa, out=loadifA); // Determine ALU Output in A or D Register (d1,d2)
    And(a=instruction[4], b=instruction[15], out=loadifD);
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=out1); // Check A or C instruction
    ARegister(in=out1, load=loadifA, out=address,out[0..14]=addressM);

    Mux16(a=address, b=inM, sel=instruction[12],out=y); // Select from RAM[A] or the A reg output
    DRegister(in=ALUOut, load=loadifD, out=x);  // Second input to ALU

    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[11], out=cc1);
    And(a=instruction[15], b=instruction[10], out=cc2);
    And(a=instruction[15], b=instruction[9], out=cc3);
    And(a=instruction[15], b=instruction[8], out=cc4);
    And(a=instruction[15], b=instruction[7], out=cc5);
    And(a=instruction[15], b=instruction[6], out=cc6);
    ALU(x=x, y=y, zx=cc1, nx=cc2, zy=cc3, ny=cc4, f=cc5, no=cc6, out=outM, out=ALUOut, zr=outMZero, ng=outMNeg);

    Or(a=outMNeg, b=outMZero, out=zrng);
    Not(in=zrng, out=outMPos);

    And(a=instruction[2], b=outMNeg, out=j1); //j1
    And(a=instruction[1], b=outMZero, out=j2);//j2
    And(a=instruction[0], b=outMPos, out=j3); //j3

    Or(a=j1, b=j2, out=j1j2);
    Or(a=j1j2, b=j3, out=j1j2j3);
    And(a=j1j2j3, b=instruction[15], out=loadPC);
    Not(in=loadPC, out=incPC);

    PC(in=address, load=loadPC, inc=incPC, reset=reset, out=pcout,out[0..14]=pc);
}